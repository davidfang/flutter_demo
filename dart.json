{
    // Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "创建model模型": {
        "prefix": "modelCreate",
        "description": "创建数据模型",
        "body": [
            "//$2模型",
            "class $1Model {",
            "    int id;",
            "    String name;",
            "    //TODO 创建其它字段",
            "",
            "    $1Model(this.id,this.name);",
            "    $1Model.fromJsonMap(Map<String, dynamic> map)",
            "        : id = map['id'],",
            "       name = map['name'],",
            "    //TODO 创建其它字段",
            "        ",
            "     ;",
            "    Map<String, dynamic> toJson() {",
            "    final Map<String, dynamic> data = new Map<String, dynamic>();",
            "    data['id'] = id;",
            "    data['name'] = name;",
            "    //TODO 创建其它字段",
            "        ",
            "    return data;",
            "    }",
            "  }",
        ]
    },
    "redux创建state": {
        "prefix": "reduxState",
        "body": [
            "import 'package:meta/meta.dart';",
            "",
            "// TODO 添加这个 $1State 到 AppState",
            "@immutable",
            "class $1State {",
            "",
            "  final bool isLoading;",
            "",
            "  $1State({this.isLoading,",
            "  });",
            "",
            "  $1State copyWith(",
            "    {bool isLoading,",
            "    }) {",
            "  // TODO 实现 copyWith",
            "  return $1State(",
            "    isLoading: isLoading ?? this.isLoading,",
            "  );",
            "  }",
            "",
            "  // TODO 实现 initialState",
            "  static initialState() {",
            "    return new $1State(isLoading: false);",
            "  }",
            "}",
            "",
        ],
    },
    "api创建action": {
        "prefix": "createApiAction",
        "description": "创建api请求的action",
        "body": [
            "//API请求：$1",
            "$2Action() {",
            "  return (Store store) async {",
            "    var response = await api.$2();",
            "    print({'请求返回：', response});",
            "",
            "    var data = response.data;",
            "    if (data['status']) {",
            "      //请求成功",
            "      print('网络请求成功');",
            "      //数据redux处理",
            "      $3Model $4 = $3Model.fromJson(data['data']);",
            "      store.dispatch(",
            "          set$3Action(store.state., $4: $4));",
            "       //或者直接跳转页面",
            "       //getIt<NavigateService>().pushNamed('/');",
            "    } else {",
            "      //请求失败",
            "      print('网络请求失败');",
            "",
            "    }",
            "  };",
            "}",
            "//state设置 $1",
            "$3 set$3Action($3 state, {$3 $4}) {",
            "  state = $4;",
            "  return state;",
            "}",
        ]
    },
    "redux创建action": {
        "prefix": "createReduxAction",
        "body": [
            "import '../models/Request.dart';",
            "",
            "class Fetch$1Action {",
            "   final bool isRefresh;",
            "    Fetch$1Action({this.isRefresh});",
            "}",
            "",
            "class $1RequestAction {",
            "   //final UserInfo(model模型) userInfo(模型变量);",
            "   final $3 $4;",
            "   //UserRequestAction(this.userInfo);",
            "   $1RequestAction(this.$4);",
            "}",
            "",
            "//操作方法",
            "//UserState userRequest(UserState state, action) {",
            " $5 $6($5 state, action) {",
            "  //state.userInfo = action.userInfo;",
            "  state.$4 = action.$4;",
            "  return state;",
            "}",
            "",
            "class $1SuccessAction {",
            "  final $2 info;//更新信息",
            "  ",
            "  $1SuccessAction({this.info});",
            "}",
            "",
            "class $1FailureAction {",
            "  final RequestFailureInfo errorInfo;",
            "  ",
            "  $1FailureAction({this.errorInfo});",
            "}",
        ]
    },
    "redux创建reducer": {
        "prefix": "reduxReducer",
        "body": [
            "import 'package:redux/redux.dart';",
            "",
            "// TODO 将这个reducer添加AppReducer",
            "//final XxxxReducer = combineReducers<XxxxState>([",
            "final $2Reducer = combineReducers<$1>([",
            "  // TODO 添加 typedReducer",
            "  //  TypedReducer<XxxxState, XxxxAction>(_onRequest),",
            "  TypedReducer<$1, $3>($4),",
            "]);",
        ],
    },
    "创建带reudx操作方法的statefull页面screen": {
        "prefix": "createReduxFullScreen",
        "body": [
            "import '../states/AppState.dart';",
            "import 'package:flutter/material.dart';",
            "import 'package:redux/redux.dart';",
            "import 'package:flutter_redux/flutter_redux.dart';",
            "",
            "//UI界面",
            "class $1Presentation extends StatefulWidget {",
            "  final $1ViewModel vm;",
            "",
            "  const $1Presentation({Key key, this.vm}) : super(key: key);",
            "",
            "  @override",
            "  _$1PresentationState createState() => _$1PresentationState();",
            "",
            "}",
            "",
            "class _$1PresentationState extends State<$1Presentation> {",
            "   final $1ViewModel vm;",
            "   _$1PresentationState(this.vm);",
            "  @override",
            "  void initState() {",
            "    super.initState();",
            "  }",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    // TODO build widget",
            "    return Container();",
            "  }",
            "}",
            "",
            "//关联redux state和ui界面",
            "class $1Screen extends StatelessWidget {",
            "  static const String routeName = '$2';",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return StoreConnector<AppState, $1ViewModel>(",
            "      distinct: true,",
            "      onInit: (store) {",
            "        store.dispatch(Fetch$4Action(isRefresh: true));",
            "      },",
            "      onDispose: (store) => store.dispatch($4ResetAction()),",
            "      converter: $1ViewModel.fromStore,",
            "      builder: (context, vm) {",
            "        return $1Presentation(vm: vm);",
            "      },",
            "    );",
            "  }",
            "",
            "  static enter<T>({BuildContext context, Function(T) onResult}) {",
            "  return Navigator.push(",
            "          context,",
            "          MaterialPageRoute(",
            "               builder: (BuildContext context) => $1Screen()))",
            "        .then(onResult ?? (_) {});",
            "  }",
            "}",
            "",
            "//本页需要的数据和处理方法",
            "class $1ViewModel {",
            "  // TODO implement hashCode and == functions;",
            "  static $1ViewModel fromStore(Store<AppState> store) {",
            "    // TODO implement fromStore",
            "    return $1ViewModel();",
            "  }",
            "}",
        ],
    },
    "flutter redux middleware factory": {
        "prefix": "midd",
        "body": [
            "import 'package:redux/redux.dart';",
            "",
            "// TODO add this to initialMiddleware",
            "class $1MiddlewareFactory extends MiddlewareFactory {",
            "  $1MiddlewareFactory(AppRepository repository) : super(repository);",
            "",
            "  @override",
            "  List<Middleware<AppState>> generate() {",
            "    return [",
            "      // TypedMiddleware<AppState, Fetch$2Action>(_fetch$2),",
            "      // TODO add TypedMiddleware",
            "    ];",
            "  }",
            "}",
        ],
    },
    "create presentation with vm by StatelessWidget": {
        "prefix": "pres",
        "body": [
            "import 'package:flutter/material.dart';",
            "import 'package:redux/redux.dart';",
            "",
            "class $1Presentation extends StatelessWidget {",
            "  final $1ViewModel vm;",
            "",
            "  const $1Presentation({Key key, this.vm}) : super(key: key);",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    // TODO build widget",
            "    return Container();",
            "  }",
            "}",
            "",
            "class $1ViewModel {",
            "",
            "  // TODO implement hashCode and == functions;",
            "",
            "  static $1ViewModel fromStore(Store<AppState> store) {",
            "    // TODO implement fromStore",
            "    return $1ViewModel();",
            "  }",
            "}",
        ],
    },
    "flutter redux state and reducer": {
        "prefix": "redu",
        "body": [
            "import 'package:meta/meta.dart';",
            "import 'package:redux/redux.dart';",
            "",
            "// TODO add this state to AppState",
            "@immutable",
            "class $1State {",
            "",
            "  final bool isLoading;",
            "",
            "  $1State({this.isLoading,",
            "  });",
            "",
            "  $1State copyWith(",
            "    {bool isLoading,",
            "    }) {",
            "  // TODO implement copyWith",
            "  return $1State(",
            "    isLoading: isLoading ?? this.isLoading,",
            "  );",
            "  }",
            "",
            "  // TODO implement initialState",
            "  $1State.initialState()",
            "    : isLoading = false;",
            "}",
            "",
            "// TODO add this reducer to reduxReducer",
            "final $2Reducer = combineReducers<$1State>([",
            "  // TODO add typedReducer",
            "  //  TypedReducer<$1State, Action>(_onRequest),",
            "]);",
        ],
    },
    "创建带reudx操作方法的stateless页面screen": {
        "prefix": "createReduxLessScreen",
        "body": [
            "import '../states/AppState.dart';",
            "import 'package:flutter/material.dart';",
            "import 'package:flutter_redux/flutter_redux.dart';",
            "import 'package:redux/redux.dart';",
            "",
            "//UI界面",
            "class $1Presentation extends StatelessWidget {",
            "  final $1ViewModel vm;",
            "",
            "  const $1Presentation({Key key, this.vm}) : super(key: key);",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return Container();",
            "  }",
            "}",
            "",
            "//关联redux state和ui界面",
            "class $1Screen extends StatelessWidget {",
            "  static const String routeName = '$2';",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return StoreConnector<AppState, $1ViewModel>(",
            "      distinct: true,",
            "      onInit: (store) {",
            "        store.dispatch(Fetch$4Action(isRefresh: true));",
            "      },",
            "      onDispose: (store) => store.dispatch($4ResetAction()),",
            "      converter: $1ViewModel.fromStore,",
            "      builder: (context, vm) {",
            "        return $1Presentation(vm: vm);",
            "      },",
            "    );",
            "  }",
            "",
            "  static enter<T>({BuildContext context, Function(T) onResult}) {",
            "  return Navigator.push(",
            "          context,",
            "          MaterialPageRoute(",
            "               builder: (BuildContext context) => $1Screen()))",
            "        .then(onResult ?? (_) {});",
            "  }",
            "}",
            "",
            "//本页需要的数据和处理方法",
            "class $1ViewModel {",
            "",
            "   $1ViewModel();",
            "  // TODO implement hashCode and == functions;",
            "",
            "  static $1ViewModel fromStore(Store<AppState> store) {",
            "    // TODO implement fromStore",
            "    return $1ViewModel();",
            "  }",
            "}",
        ],
    },
    "redux创建viewModel": {
        "prefix": "reduxViewModel",
        "body": [
            "class $1ViewModel {",
            "",
            "  // TODO implement hashCode and == functions;",
            "  ",
            "  static $1ViewModel fromStore(Store<AppState> store) {",
            "    // TODO implement fromStore",
            "    return $1ViewModel();",
            "  }",
            "}",
        ],
    },
    "创建AnimatedBuilder": {
        "prefix": "animatedBuilder",
        "body": [
            "new AnimatedBuilder(",
            "  animation: $1,",
            "  child: $1,",
            "  builder: (BuildContext context, Widget child) {",
            "    return Container();",
            "  },",
            "),",
        ],
        "description": "创建AnimatedBuilder"
    },
    "创建Build()方法": {
        "prefix": "build",
        "body": [
            "@override",
            "Widget build(BuildContext context) {",
            "  return $1;",
            "}",
        ],
        "description": "创建Build()方法"
    },
    "创建FutureBuilder": {
        "prefix": "futureBuilder",
        "body": [
            "new FutureBuilder(",
            "  future: $1,",
            "  initialData: $1,",
            "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
            "    return $1;",
            "  },",
            ");",
        ],
        "description": "创建FutureBuilder"
    },
    "创建LayoutBuilder": {
        "prefix": "layoutBuilder",
        "body": [
            "new LayoutBuilder(",
            "  builder: (BuildContext context, BoxConstraints constraints) {",
            "    return $1;",
            "  },",
            ");",
        ],
        "description": "创建LayoutBuilder"
    },
    "创建OrientationBuilder": {
        "prefix": "orientationBuilder",
        "body": [
            "new OrientationBuilder(",
            "  builder: (BuildContext context, Orientation orientation) {",
            "    return Container();",
            "  },",
            ");",
        ],
        "description": "创建OrientationBuilder"
    },
    "创建StatefulBuilder": {
        "prefix": "statefulBuilder",
        "body": [
            "new StatefulBuilder(",
            "  builder: (BuildContext context, setState) {",
            "    return $1;",
            "  },",
            ");",
        ],
        "description": "创建StatefulBuilder"
    },
    "创建StreamBuilder": {
        "prefix": "streamBuilder",
        "body": [
            "new StreamBuilder(",
            "  stream: $1,",
            "  initialData: $2,",
            "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
            "    return $3;",
            "  },",
            ");",
        ],
        "description": "创建StreamBuilder"
    },
    "自定义CustomClipper": {
        "prefix": "customClipper",
        "body": [
            "class $1 extends CustomClipper<Path> {",
            "    @override",
            "    Path getClip(Size size) {",
            "      //TODO:",
            "    }",
            "",
            "    @override",
            "    bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
            "}",
        ],
        "description": "自定义CustomClipper"
    },
    "创建Center": {
        "prefix": "center",
        "body": [
            "new Center(",
            "    child: $1,",
            "),",
        ],
        "description": "创建Center"
    },
    "创建Column": {
        "prefix": "column",
        "body": [
            "new Column(",
            "    children: [$1],",
            "),",
        ],
        "description": "创建Column"
    },
    "创建完整的Container": {
        "prefix": "container",
        "body": [
            "new Container(",
            "  //宽度",
            "  width: $1,",
            "  //高度",
            "  height: $2,",
            "  // 盒子样式",
            "  decoration: new BoxDecoration(",
            "    color: Colors.$3,",
            "    //设置Border属性给容器添加边框",
            "    border: new Border.all(",
            "      //为边框添加颜色",
            "      color: Colors.$3,",
            "      width: $4, //边框宽度",
            "    ),",
            "  ),",
            "  child: $5,",
            ");",
        ],
        "description": "创建完整的Container"
    },
    "自定义CustomPainter": {
        "prefix": "customPainter",
        "body": [
            "class $1Painter extends CustomPainter {",
            "  @override",
            "  void paint(Canvas canvas, Size size) {",
            "    //TODO",
            "  }",
            "",
            "  @override",
            "  bool shouldRepaint($name$Painter oldDelegate) => false;",
            "",
            "  @override",
            "  bool shouldRebuildSemantics($1Painter oldDelegate) => false;",
            "}",
        ],
        "description": "自定义CustomPainter"
    },
    "CustomScrollView + SliverPadding创建列表，子控件带有边距": {
        "prefix": "customScrollView",
        "body": [
            "new CustomScrollView(",
            "  shrinkWrap: true,",
            "  slivers: <Widget>[",
            "    new SliverPadding(",
            "      padding: const EdgeInsets.all($1),",
            "      sliver: new SliverList(",
            "        delegate: new SliverChildListDelegate(",
            "          <Widget>[",
            "            //TODO:请填写子控件",
            "            $2",
            "          ],",
            "        ),",
            "      ),",
            "    ),",
            "  ],",
            ");",
        ],
        "description": "CustomScrollView + SliverPadding创建列表，子控件带有边距"
    },
    "使用CustomScrollView + SliverGrid创建列表": {
        "prefix": "customScrollViewGrid",
        "body": [
            "new CustomScrollView(",
            "  shrinkWrap: true,",
            "  slivers: <Widget>[",
            "    new SliverGrid(",
            "      // 设置grid的宽高、间距属性",
            "      gridDelegate: new SliverGridDelegateWithMaxCrossAxisExtent(",
            "        // 可以理解为：每一个item的宽（或高）的最大值",
            "        maxCrossAxisExtent: $maxCrossAxisExtent$,",
            "        // 行之间的间距",
            "        mainAxisSpacing: $1,",
            "        // 列之间的间距",
            "        crossAxisSpacing: $2,",
            "        // 子孩子的宽高比例，即：宽度/高度的值",
            "        childAspectRatio: $3,",
            "      ),",
            "      // 设置每一个item的布局",
            "      delegate: new SliverChildBuilderDelegate(",
            "        (BuildContext context, int index) {",
            "          return $4;",
            "        },",
            "        childCount: $5,",
            "      ),",
            "    )",
            "  ],",
            ");",
        ],
        "description": "使用CustomScrollView + SliverGrid创建列表"
    },
    "创建GridView.count": {
        "prefix": "gridView",
        "body": [
            "new GridView.count(",
            "  // 创建几列",
            "  crossAxisCount: $1,",
            "  // Axis.horizontal表示横向滑动，scrollDirection: Axis.vertical表示纵向滑动",
            "  scrollDirection: Axis.vertical,",
            "  // 列之间的间距",
            "  crossAxisSpacing: $2,",
            "  // 行之间的间距",
            "  mainAxisSpacing: $3,",
            "  // 默认false 是否根据子孩子的宽高自动包裹item自身",
            "  shrinkWrap: false,",
            "  // true表示数据倒序排列 false表示顺序排列",
            "  reverse: false,",
            "  // 子孩子的比例",
            "  childAspectRatio: $4,",
            "  // 设置子孩子item,这里传入子孩子控件",
            "  children: $5,",
            ");",
        ],
        "description": "创建GridView.count"
    },
    "创建 Inherited": {
        "prefix": "inherited",
        "body": [
            "class $1 extends InheritedWidget {",
            "  $1({Key key, this.child}) : super(key: key, child: child);",
            "",
            " final Widget child;",
            "",
            "  static $1 of(BuildContext context) {",
            "    return (context.inheritFromWidgetOfExactType($1)as $1);",
            "  }",
            "",
            "  @override",
            "  bool updateShouldNotify( $1 oldWidget) {",
            "    return true;",
            "  }",
            "}",
        ],
        "description": "创建 Inherited"
    },
    "创建基本的ListView": {
        "prefix": "listView",
        "body": [
            "new ListView(",
            "  children: [",
            "    //TODO:这里写子控件。",
            "  ],",
            ");",
        ],
        "description": "创建基本的ListView"
    },
    "创建ListView.builder": {
        "prefix": "listViewBuilder",
        "body": [
            "new ListView.builder(",
            "   padding: new EdgeInsets.all($value$),",
            "   itemCount: $itemCount$,",
            "   itemBuilder: (BuildContext context, int index) {",
            "     return $widget$;",
            "   },",
            ");",
        ],
        "description": "创建ListView.builder"
    },
    "创建带分割线的ListView": {
        "prefix": "listViewD",
        "body": [
            "new ListView(",
            "   shrinkWrap: true,",
            "   // 排列方向，Axis.horizontal表示水平，Axis.vertical表示垂直",
            "   scrollDirection: Axis.vertical,",
            "   padding: const EdgeInsets.all(20.0),",
            "   children: <Widget>[",
            "     $1,",
            "     new Divider(height: 1.0, color: Colors.grey),",
            "     $1,",
            "     new Divider(height: 1.0, color: Colors.grey),",
            "     // todo: 建议控件多的话可以做一个封装",
            "   ],",
            ");",
        ],
        "description": "创建带分割线的ListView"
    },
    "创建RadioListTile，可以单选的item": {
        "prefix": "radioListTile",
        "body": [
            "  //TODO:以下代码要写在State类里面",
            "  Widget items() {",
            "    return new Column(",
            "      // In the build function of that State",
            "      children: <Widget>[",
            "        new RadioListTile<SingingCharacter>(",
            "          title: const Text('$1'),",
            "          value: SingingCharacter.title1,",
            "          groupValue: _character,",
            "          onChanged: (SingingCharacter value) {",
            "            setState(() {",
            "              _character = value;",
            "            });",
            "          },",
            "        ),",
            "        new RadioListTile<SingingCharacter>(",
            "          title: const Text('$2'),",
            "          value: SingingCharacter.title2,",
            "          groupValue: _character,",
            "          onChanged: (SingingCharacter value) {",
            "            setState(() {",
            "              _character = value;",
            "            });",
            "          },",
            "        ),",
            "      ],",
            "    );",
            "  }",
            "",
            "  // In the State of a stateful widget:",
            "  SingingCharacter _character = SingingCharacter.title1;",
            "",
            "// TODO: 这个类写在State类外面",
            "enum SingingCharacter { title1, title2 }",
        ],
        "description": "创建RadioListTile，可以单选的item"
    },
    "创建带有各种ListTile的ListView": {
        "prefix": "listViewListTile",
        "body": [
            "new ListView(",
            "  children: <Widget>[",
            "    // 一个有图片和文字组成的简单列表item",
            "    new ListTile(",
            "      leading: new Icon(Icons.$1),",
            "      title: new Text('$title$'),",
            "      subtitle: new Text('$2'),",
            "      // 右边的图标",
            "      trailing: new Icon(Icons.$1),",
            "      onTap: () {",
            "        //TODO:这里处理点击事件",
            "      },",
            "      onLongPress: () {",
            "        //TODO:这里处理长按事件",
            "      },",
            "      selected: true,",
            "    ),",
            "    // 单选框列表item",
            "    new CheckboxListTile(",
            "      value: true,",
            "      onChanged: ((bool) {",
            "        //TODO:焦点改变的监听事件写在这里：",
            "      }),",
            "      title: new Text('$3'),",
            "      subtitle: new Text('$4'),",
            "     selected: true,",
            "    activeColor: Colors.teal,",
            "    ),",
            "    // 开关列表item",
            "    new SwitchListTile(",
            "      value: true,",
            "      onChanged: ((bool) {",
            "       //TODO:焦点改变的监听事件写在这里：",
            "      }),",
            "      title: new Text('$5'),",
            "      subtitle: new Text('$5'),",
            "      //如果subtitle文字过长，将会以三行显示",
            "      isThreeLine: true,",
            "      selected: true,",
            "      activeColor: Colors.teal,",
            "      //SwitchListTile左边的图标",
            "      secondary: new Icon(Icons.account_circle),",
            "    ),",
            "    new AboutListTile(",
            "      icon: new Icon(Icons.$6),",
            "      //公司logo",
            "      applicationIcon: Image.asset('$7'),",
            "      //app名称",
            "      applicationName: '关于我们',",
            "      //app版本号",
            "      applicationVersion: 'V1.0.0',",
            "      //版权信息",
            "      applicationLegalese: '版权归XX科技有限公司所有...',",
            "    ),",
            "  ],",
            ");",
        ],
        "description": "创建带有各种ListTile的ListView"
    },
    "创建 StatefulWidget 控件": {
        "prefix": "mainstf",
        "body": [
            "import 'package:flutter/material.dart';",
            "",
            "void main(){",
            "runApp(new MaterialApp(",
            "  title:'$1',",
            "  theme: new ThemeData(",
            "    primarySwatch: Colors.blue,",
            "),",
            "home: new $2(),",
            "));",
            "}",
            "",
            "class $2 extends StatefulWidget{",
            "@override",
            "_$2State createState() => new _$2State();",
            "}",
            "",
            "class _$2State extends State<$2>{",
            "   @override",
            "   Widget build(BuildContext context){",
            "      return new Scaffold(",
            "          appBar: new AppBar(",
            "             title: new Text('$1'),",
            "             ),",
            "         );",
            "     }",
            "   }",
        ],
        "description": "创建 StatefulWidget 控件"
    },
    "创建 StatelessWidget 控件": {
        "prefix": "mainstl",
        "body": [
            "import 'package:flutter/material.dart';",
            "",
            "void main(){",
            "   runApp(new MaterialApp(",
            "    title:'$1',",
            "    theme: new ThemeData(",
            "        primarySwatch: Colors.blue,",
            "   ),",
            "   home: new $2(),",
            "   ));",
            "}",
            "",
            "class $2 extends StatelessWidget{",
            "   @override",
            "   Widget build(BuildContext context){",
            "       return new Scaffold(",
            "           appBar: new AppBar(",
            "           title: new Text('$1'),",
            "           ),",
            "       );",
            "   }",
            "}",
        ],
        "description": "创建 StatelessWidget 控件"
    },
    "创建方法": {
        "prefix": "func",
        "body": [
            "void $1(){",
            "  //TODO",
            "}",
        ],
        "description": "创建方法"
    },
    "创建私有方法": {
        "prefix": "func2",
        "body": [
            "void _$1(){",
            "  //TODO",
            "}",
        ],
        "description": "创建私有方法"
    },
    "创建Row": {
        "prefix": "row",
        "body": [
            "new Row(",
            "  children: [],",
            "),",
        ],
        "description": "创建Row"
    },
    "创建SizedBox": {
        "prefix": "sizedBox",
        "body": [
            "new SizedBox(",
            "  width: $1,",
            "  height: $2, ",
            "  child: $3,",
            ");",
        ],
        "description": "创建SizedBox"
    },
    "创建SingleChildScrollView": {
        "prefix": "singleChildScrollView",
        "body": [
            "SingleChildScrollView(",
            "  scrollDirection: Axis.vertical,",
            "  padding: new EdgeInsets.all($1),",
            "  controller: $2,",
            "  child: $3,",
            ");",
        ],
        "description": "创建SingleChildScrollView"
    },
    "创建Stateful（带有 AnimationController）": {
        "prefix": "stfAnimationController",
        "body": [
            "class $1 extends StatefulWidget {",
            "  @override",
            "  _$1State createState() => _$1State();",
            "}",
            "",
            "class _$1State extends State<$1> with SingleTickerProviderStateMixin {",
            "  AnimationController _controller;",
            "",
            "  @override",
            "  void initState() {",
            "    _controller = AnimationController(vsync: this);",
            "    super.initState();",
            "  }",
            "",
            "  @override",
            "  void dispose() {",
            "    _controller.dispose();",
            "    super.dispose();",
            "  }",
            "  ",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return Container($2);",
            "  }",
            "}",
        ],
        "description": "创建Stateful（带有 AnimationController）"
    },
    "创建完整的StatefulWidget，包含生命周期相关方法。": {
        "prefix": "stf",
        "body": [
            "import 'package:flutter/material.dart';",
            "",
            "///文档说明",
            "///$1",
            "",
            "",
            "class $2 extends StatefulWidget {",
            "  static String routName = '/$2';",
            "",
            "  @override",
            "  _$2State createState() => new _$2State();",
            "}",
            "",
            "class _$2State extends State<$2> {",
            "  @override",
            "  void initState() {",
            "    // TODO: implement initState",
            "    super.initState();",
            "  }",
            "  ",
            "  @override",
            "  void dispose() {",
            "    // TODO: implement dispose",
            "    super.dispose();",
            "  }",
            "  ",
            "  @override",
            "  void didUpdateWidget($2 oldWidget) {",
            "    // TODO: implement didUpdateWidget",
            "    super.didUpdateWidget(oldWidget);",
            "  }",
            "  ",
            "  @override",
            "  void didChangeDependencies() {",
            "    // TODO: implement didChangeDependencies",
            "    super.didChangeDependencies();",
            "  }",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return new Scaffold(",
            "      appBar: new AppBar(",
            "        title: new Text('$3'),",
            "      ),",
            "    );",
            "  }",
            "}",
        ],
        "description": "创建完整的StatefulWidget，包含生命周期相关方法。"
    },
    "创建StatelessWidget": {
        "prefix": "stl",
        "body": [
            "import 'package:flutter/material.dart';",
            "",
            "class $1 extends StatelessWidget {",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return new Scaffold(",
            "      appBar: new AppBar(",
            "        title: new Text('$2'),",
            "      ),",
            "    );",
            "  }",
            "}",
        ],
        "description": "创建StatelessWidget"
    },
    "创建CustomScrollView": {
        "prefix": "customScrollView",
        "body": [
            "new CustomScrollView(",
            "  slivers: <Widget>[",
            "    //TODO",
            "  ],",
            "),",
        ],
        "description": "创建CustomScrollView"
    },
    "创建一个标准的Text": {
        "prefix": "text",
        "body": [
            "new Text('$1',",
            "       style: new TextStyle(",
            "         color: Colors.$2, ",
            "         fontWeight: FontWeight.$3, ",
            "         fontSize: $4,",
            "       ),",
            "       textAlign: TextAlign.$5,",
            "       textDirection: TextDirection.$6,",
            "       textScaleFactor: $7,",
            "       overflow: TextOverflow.$8,",
            "       locale: Localizations.localeOf(context),",
            "       maxLines: $9,",
            "       );",
        ],
        "description": "创建一个标准的Text"
    },
    "创建一个view model": {
        "prefix": "createViewModel",
        "body": [
            "import 'package:dio/dio.dart';",
            "import 'package:flutter/material.dart';",
            "import 'package:oktoast/oktoast.dart';",
            "",
            "class $1Model extends ChangeNotifier {",
            "    $1 _$2;",
            "",
            "    //获取数据$2",
            "    $1 get $2 {",
            "      if (_$2 == null) {",
            "        //todo 初始化数据",
            "        var $2Obj;",
            "        if ($2Obj != null) {",
            "          _$2 = $1.fromJson($2Obj);",
            "        }",
            "      }",
            "      return _$2;",
            "    }",
            "",
            "    //是否有数据$1",
            "    bool get has$1 => _$2 != null;",
            "",
            "   ///请求接口，获取$1信息",
            "   void get$1(BuildContext context) async {",
            "    // if (has$1) {//缓存",
            "   //   return _$2;",
            "   // }",
            "   Response result = await Api().get$1();",
            "   var data = result.data;",
            "   if (data['status']) {",
            "       //请求成功",
            "       $1 $2 = $1.fromJson(data['data']);",
            "        save$1($2);",
            "    } else {",
            "        //请求失败",
            "        showToast(data['message']);",
            "    }",
            "    }",
            "    ",
            "    //保存数据到provider",
            "   save$1($1 $2) {",
            "   _$2 = $2;",
            "   notifyListeners();",
            "   }",
            " }",
        ],
        "description": "创建一个view model"
    }
}
